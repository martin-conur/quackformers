#
# This workflow calls the main distribution pipeline from DuckDB to build, test and (optionally) release the extension
#
name: Main Extension Distribution Pipeline
on:
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' || github.sha }}
  cancel-in-progress: true

jobs:
  duckdb-stable-build:
    name: Build extension binaries
    uses: duckdb/extension-ci-tools/.github/workflows/_extension_distribution.yml@v1.4.1
    with:
      duckdb_version: v1.4.1
      ci_tools_version: main
      extension_name: quackformers
      extra_toolchains: rust;python3
      exclude_archs: 'wasm_mvp;wasm_eh;wasm_threads;linux_amd64_musl;windows_amd64_mingw'

  store-builds:
    name: Store builds in repository
    runs-on: ubuntu-latest
    needs: duckdb-stable-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Create builds directory
        run: |
          mkdir -p builds
          echo "# Extension Builds" > builds/README.md
          echo "" >> builds/README.md
          echo "This directory contains built extension binaries from CI." >> builds/README.md
          echo "Generated on: $(date)" >> builds/README.md

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: builds/artifacts

      - name: Organize builds
        run: |
          cd builds
          # Extract version from Makefile
          VERSION=$(grep '^TARGET_DUCKDB_VERSION=' ../Makefile | sed 's/TARGET_DUCKDB_VERSION=//')
          echo "Building for version: $VERSION"
          mkdir -p "$VERSION"

          # Get the DuckDB version used in the workflow
          DUCKDB_VERSION="v1.4.1"

          for artifact_dir in artifacts/*/; do
            if [ -d "$artifact_dir" ]; then
              artifact_name=$(basename "$artifact_dir")
              echo "Processing artifact: $artifact_name"

              # Extract architecture from artifact name (dynamically using the DuckDB version)
              arch=$(echo "$artifact_name" | sed "s/quackformers-${DUCKDB_VERSION}-extension-//")

              # Create version/architecture directory
              mkdir -p "$VERSION/$arch"

              # Move the extension file
              if [ -f "$artifact_dir"/*.duckdb_extension ]; then
                cp "$artifact_dir"/*.duckdb_extension "$VERSION/$arch/"
                echo "Stored extension for $arch in $VERSION/$arch/"
              fi
            fi
          done

          # Clean up artifacts directory
          rm -rf artifacts

      - name: Commit builds
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add builds/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update extension builds [skip ci]"
            git push
          fi
